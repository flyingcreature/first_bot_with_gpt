import telebot
from telebot.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from dotenv import load_dotenv
from os import getenv
from config import LOGS_PATH, MAX_TASK_TOKENS, USER_DATA_PATH
from gpt import ask_gpt_helper, count_tokens, logging
from utils import create_keyboard, load_data, save_data

load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)


user_data = load_data(USER_DATA_PATH)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    user_name = message.from_user.username
    user_id = message.chat.id

    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "user_name": user_name,
            "current_task": None,
            "current_answer": None,
        }
        save_data(user_data, USER_DATA_PATH)

    bot.send_message(
        user_id,
        f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º!\n"
        f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
    )
    bot.register_next_step_handler(message, solve_task)


# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä
def filter_solve_task(message: Message) -> bool:
    return message.text == "–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ "–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=filter_solve_task)
def solve_task(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, give_answer)


def give_answer(message: Message):
    user_id = message.chat.id

    if count_tokens(message.text) <= MAX_TASK_TOKENS:  # –ï—Å–ª–∏ —É–ª–æ–∂–∏–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        bot.send_message(message.chat.id, "–†–µ—à–∞—é...")
        answer = ask_gpt_helper(message.text)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç gpt

        user_data[str(user_id)][
            "current_task"
        ] = message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        user_data[str(user_id)]["current_answer"] = answer  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç gpt
        save_data(user_data, USER_DATA_PATH)

        if answer is None:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ gpt
            bot.send_message(
                user_id,
                "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
            )
        elif answer == "":  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –Ω–æ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π
            bot.send_message(
                user_id,
                "–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
            )
            logging.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"
            )
        else:  # –ï—Å–ª–∏ –≤—Å—ë –æ–∫
            bot.send_message(
                user_id,
                answer,
                reply_markup=create_keyboard(
                    ["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"]
                ),
            )

    else:  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
        user_data[str(user_id)]["current_task"] = None
        user_data[str(user_id)]["current_answer"] = None
        save_data(user_data, USER_DATA_PATH)

        bot.send_message(
            message.chat.id,
            "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å.",
        )
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–æ: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
        )


def filter_continue_explaining(message: Message) -> bool:
    return message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
@bot.message_handler(func=filter_continue_explaining)
def continue_explaining(message: Message):
    user_id = message.chat.id

    if not user_data[str(user_id)][
        "current_task"
    ]:  # –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –µ—â—ë –Ω–µ –≤–≤–µ–ª–∏ –∑–∞–¥–∞—á—É
        bot.send_message(
            user_id,
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
        )

    else:
        bot.send_message(user_id, "–§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...")
        answer = ask_gpt_helper(
            user_data[str(user_id)]["current_task"],
            user_data[str(user_id)]["current_answer"],
        )
        user_data[str(user_id)][
            "current_answer"
        ] += answer  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
        save_data(user_data, USER_DATA_PATH)

        if answer is None:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ gpt
            bot.send_message(
                user_id,
                "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
            )
        elif answer == "":  # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–µ–∫—É–¥–∞
            bot.send_message(
                user_id,
                "–ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞ ^-^",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]),
            )
        else:
            bot.send_message(
                user_id,
                answer,
                reply_markup=create_keyboard(
                    ["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"]
                ),
            )


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ [mistralai/Mistral-7B-Instruct-v0.2], "
        "–∑–∞–ø—É—â–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n"
        "–ü–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ —Ç—ã –æ–∂–∏–¥–∞–µ—à—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚è≥.\n"
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –≤—Å–µ—Ö —Å–∏–ªüí¶."
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


@bot.message_handler(commands=['debug'])
def send_logs(message):
    try:
        with open(LOGS_PATH, "rb") as f:
            bot.send_document(
                message.chat.id,
                f
            )
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(
            chat_id=message.chat.id,
            text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!"
        )


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(message: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({message.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(none_stop=True)











