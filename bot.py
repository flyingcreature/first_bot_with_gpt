import telebot
from telebot.types import Message, ReplyKeyboardRemove

from dotenv import load_dotenv
from os import getenv

from config import LOGS_PATH, MAX_TASK_TOKENS

from gpt import ask_gpt_helper, count_tokens, logging

from utils import create_keyboard

from database import (prepare_database, get_user_data, add_user, update_row, get_user)

load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)

prepare_database()  # –°–æ–∑–¥–∞–µ–º sql —Ç–∞–±–ª–∏—Ü—É

command_to_subject = {
    "mathüßÆ": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
    "rusüìö": "—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"
}

command_to_level = {
    "beginner‚ú®": "–Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ",
    "advanced‚≠êÔ∏è": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ"
}


@bot.message_handler(commands=["start"])
def start(message):
    user_name = message.from_user.username
    user_id = message.chat.id

    add_user(
        user_id=int(user_id),
        user_name=user_name,
        subject=None,
        level=None,
        task=None,
        answer=None
    )
    bot.send_message(
        chat_id=user_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º!\n"
             f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
             "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è"]),
    )


def filter_send_keyboard_subject(message: Message) -> bool:
    return message.text.lower() in ["–∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è", "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è"]


@bot.message_handler(func=filter_send_keyboard_subject)
def send_keyboard_subject(message):
    user_id = message.chat.id
    user_data = get_user_data(int(user_id))
    print(user_data)

    if user_data["subject"] is None or message.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è":
        bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç",
            reply_markup=create_keyboard(["mathüßÆ", "rusüìö"])
        )
        bot.register_next_step_handler(message, choose_subject)

    else:
        bot.send_message(
            chat_id=user_id,
            text="–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:",
        )
        bot.register_next_step_handler(message, give_answer)


def filter_choose_subject(message):
    return message.text.lower() in ["mathüßÆ", "rusüìö"]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
@bot.message_handler(func=filter_choose_subject)
def choose_subject(message: Message):
    user_id = message.chat.id

    if message.text.lower() not in ["mathüßÆ", "rusüìö"]:
        bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ('mathüßÆ' –∏–ª–∏ 'rusüìö')",
        )
        bot.register_next_step_handler(message, choose_subject)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    else:
        text = (
            "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞:\n"
            "beginner - –Ω–∞—á–∏–Ω–∞—é—â–∏–π\n"
            "advanced - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        )

        subject = command_to_subject.get(message.text.lower())  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        update_row(int(user_id), "subject", subject)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É SQL –ø—Ä–µ–¥–º–µ—Ç
        get_user()

        bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=create_keyboard(["Beginner‚ú®", "Advanced‚≠êÔ∏è"])
        )
        bot.register_next_step_handler(message, choose_level)


def filter_choose_level(message):
    return message.text.lower() in ["beginner‚ú®", "–∞dvanced‚≠êÔ∏è"]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
@bot.message_handler(func=filter_choose_level)
def choose_level(message: Message):
    user_id = message.chat.id

    if message.text.lower() not in ["beginner‚ú®", "advanced‚≠êÔ∏è"]:
        bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ('Beginner' –∏–ª–∏ 'Advanced')"
        )
        bot.register_next_step_handler(message, choose_level)
    else:
        level = command_to_level.get(message.text.lower())  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        update_row(int(user_id), "level", level)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É SQL —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞

        get_user()
        bot.send_message(
            chat_id=user_id,
            text="–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏üóíÔ∏è:",
            reply_markup=ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, give_answer)


def give_answer(message: Message):
    user_id = message.chat.id
    user_data = get_user_data(int(user_id))

    # –î–æ—Å—Ç–∞—ë–º –∏–∑ SQL –ø—Ä–µ–¥–º–µ—Ç –∏ lvl, —á—Ç–æ –±—ã –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ –±–ª–æ–∫ —Å gpt
    subject = user_data["subject"]
    level = user_data["level"]

    if count_tokens(message.text) <= MAX_TASK_TOKENS:  # –ï—Å–ª–∏ —É–ª–æ–∂–∏–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        bot.send_message(
            chat_id=user_id,
            text="–†–µ—à–∞—é..."
        )

        answer = ask_gpt_helper(message.text, subject, level)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç gpt

        update_row(int(user_id), "task", message.text)  # –í–Ω–æ—Å–∏–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        update_row(int(user_id), "answer", answer)  # –í–Ω–æ—Å–∏–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç gpt

        if answer is None:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ gpt
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è"]),
            )
        elif answer == "":  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –Ω–æ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è"]),
            )
            logging.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"
            )
        else:  # –ï—Å–ª–∏ –≤—Å—ë –æ–∫
            bot.send_message(
                chat_id=user_id,
                text=answer,
                reply_markup=create_keyboard(
                    ["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µüóíÔ∏è", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è"]
                ),
            )
            get_user()
    else:  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
        update_row(int(user_id), "task", None)  # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        update_row(int(user_id), "answer", None)  # –û–±–Ω—É–ª—è–µ–º –æ—Ç–≤–µ—Ç gpt

        bot.send_message(
            chat_id=user_id,
            text="–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—åü§è.",
        )
        logging.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}\n–ü–æ–ª—É—á–µ–Ω–æ: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
        )


def filter_continue_explaining(message: Message) -> bool:
    return message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µüóíÔ∏è"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
@bot.message_handler(func=filter_continue_explaining)
def continue_explaining(message: Message):
    user_id = message.chat.id
    user_data = get_user_data(int(user_id))

    if user_data["task"] is None:  # –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –µ—â—ë –Ω–µ –≤–≤–µ–ª–∏ –∑–∞–¥–∞—á—É
        bot.send_message(
            chat_id=user_id,
            text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è"]),
        )

    else:
        bot.send_message(
            chat_id=user_id,
            text="–§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ..."
        )
        # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç–≤–µ—Ç—É –∏–∑ SQL
        answer = ask_gpt_helper(
            user_data["task"],
            user_data["subject"],
            user_data["level"],
            user_data["answer"]
        )
        user_data["answer"] += answer  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É

        if answer is None:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ gpt
            bot.send_message(
                chat_id=user_id,
                text="–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è"]),
            )
        elif answer == "":  # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–µ–∫—É–¥–∞
            bot.send_message(
                chat_id=user_id,
                text="–ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞ ^-^",
                reply_markup=create_keyboard(["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è"]),
            )
        else:
            bot.send_message(
                chat_id=user_id,
                text=answer,
                reply_markup=create_keyboard(
                    ["–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüôã‚Äç‚ôÇÔ∏è", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µüóíÔ∏è", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å‚úçÔ∏è"]
                ),
            )
        get_user()


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ [mistralai/Mistral-7B-Instruct-v0.2], "
        "–∑–∞–ø—É—â–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n"
        "–ü–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ —Ç—ã –æ–∂–∏–¥–∞–µ—à—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚è≥.\n"
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –≤—Å–µ—Ö —Å–∏–ªüí¶."
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=ReplyKeyboardRemove()
    )


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


@bot.message_handler(commands=['debug'])
def send_logs(message):
    try:
        with open(LOGS_PATH, "rb") as f:
            bot.send_document(
                message.chat.id,
                f
            )
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(
            chat_id=message.chat.id,
            text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!"
        )


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(message: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({message.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(none_stop=True)


