import telebot
from telebot.types import Message
from dotenv import load_dotenv
from os import getenv
from gpt import GPT

load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)

gpt = GPT(system_content="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ")


@bot.message_handler(commands=['start'])
def start_command(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user_name}!"
    )


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."
    )




def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


@bot.message_handler(commands=['gpt'])
def solve_task(message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º—Ç\n"
             "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –ª—é–±—É—é –∑–∞–¥–∞—á—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å\n\n"
             "-–ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å '–ø—Ä–æ–¥–æ–ª–∂–∏', —è –ø—Ä–æ–¥–æ–ª–∂—É –æ–±—ä—è—Å–Ω—è—Ç—å –∑–∞–¥–∞—á—É\n\n"
             "-–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–ø–∏—à–∏ '–∫–æ–Ω–µ—Ü'"
    )
    bot.register_next_step_handler(
        message,
        get_promt
    )


def get_promt(message):
    if message.content_type != "text":
        bot.send_message(
            chat_id=message.chat.id,
            text="–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        )
        bot.register_next_step_handler(
            message,
            get_promt
        )
        return

    user_promt = message.text

    bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç!"
    )

    if user_promt.lower() == "–∫–æ–Ω–µ—Ü":
        gpt.clear_history()
        return

    request_tokens = gpt.count_tokens(user_promt)
    if request_tokens > gpt.MAX_TOKENS:
        bot.send_message(
            chat_id=message.chat.id,
            text="–ó–∞–ø—Ä–æ—Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª-–≤—É —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å!"
        )
        bot.register_next_step_handler(
            message,
            get_promt
        )

    if user_promt.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏":
        gpt.clear_history()

    json = gpt.make_promt(user_promt)

    resp = gpt.send_request(json)

    response = gpt.send_request(resp)
    if not response[0]:
        bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å..."
        )
    bot.send_message(
        chat_id=message.chat.id,
        text=response[1]
    )




@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(mesage: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({mesage.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=mesage.chat.id,
        text=text
    )


bot.infinity_polling(none_stop=True)
