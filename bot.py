import telebot
from telebot.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from dotenv import load_dotenv
from os import getenv
from gpt import GPT, logging

load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)

gpt = GPT(system_content="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ")


@bot.message_handler(commands=['start'])
def start_command(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user_name} üëã!"
    )


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ [mistralai/Mistral-7B-Instruct-v0.2], "
        "–∑–∞–ø—É—â–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n"
        "–ü–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ —Ç—ã –æ–∂–∏–¥–∞–µ—à—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚è≥.\n"
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –≤—Å–µ—Ö —Å–∏–ªüí¶."
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


@bot.message_handler(commands=['gpt'])
def solve_task(message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º—Ç\n"
             "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –ª—é–±—É—é –∑–∞–¥–∞—á—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å\n\n"
             "-–ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å '–ø—Ä–æ–¥–æ–ª–∂–∏', —è –ø—Ä–æ–¥–æ–ª–∂—É –æ–±—ä—è—Å–Ω—è—Ç—å –∑–∞–¥–∞—á—É\n\n"
             "-–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–ø–∏—à–∏ '–ö–æ–Ω–µ—Ü'",
        reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
    )
    bot.register_next_step_handler(
        message,
        get_promt,

    )


def get_promt(message):
    if message.content_type != "text":
        bot.send_message(
            chat_id=message.chat.id,
            text="–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
            reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
        )
        bot.register_next_step_handler(
            message,
            get_promt
        )
        return

    user_promt = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    request_tokens = gpt.count_tokens(user_promt)
    if request_tokens > gpt.MAX_TOKENS:
        bot.send_message(
            chat_id=message.chat.id,
            text="–ó–∞–ø—Ä–æ—Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª-–≤—É —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å!",
            reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
        bot.register_next_step_handler(
            message,
            get_promt
        )

    if user_promt.lower() == "–∫–æ–Ω–µ—Ü‚úã":
        gpt.clear_history()
        bot.send_message(
            chat_id=message.chat.id,
            text="–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ!",
        reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
    )

    if user_promt.lower() != "üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà":
        gpt.clear_history()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
    json = gpt.make_promt(user_promt)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    resp = gpt.send_request(json)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
    response = gpt.process_resp(resp)

    if not response[0]:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å {response}")
        bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å...",
            reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
        )
    if user_promt.lower() == "üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà":
        gpt.save_history(response[1])
        bot.send_message(
            chat_id=message.chat.id,
            text=response[1],
            reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
        )
    else:
        bot.send_message(
            chat_id=message.chat.id,
            text=response[1],
            reply_markup=create_keyboard(["üëâ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëà", "–ö–æ–Ω–µ—Ü‚úã"])
        )

        bot.register_next_step_handler(
            message,
            get_promt
        )


@bot.message_handler(commands=['debug'])
def send_logs(message):
    try:
        with open("log_file.txt", "rb") as f:
            bot.send_document(message.chat.id, f)
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(
            chat_id=message.chat.id,
            text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!"
        )


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(mesage: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({mesage.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=mesage.chat.id,
        text=text
    )


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(none_stop=True)
